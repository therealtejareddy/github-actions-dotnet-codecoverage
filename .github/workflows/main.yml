name: Code coverage

on:
  pull_request:

  workflow_run:
    workflows: ["ci"]
    types:
      - completed


env:
  DOTNET_VERSION: '8.0.100'

jobs:
  dummy:
    runs-on: ubuntu-latest
    steps:
      - name: dummy
        run: echo "Runs dummy"
  code-coverage:
    needs: ci-job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore Dependencies
        run: dotnet restore

      - name: build
        run : dotnet build --no-restore /p:ContinuousIntegrationBuild=true

      - name: Test with Code coverage
        run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage --logger "trx;LogFileName=test-results.trx"
      
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()    # Explicitly run this step even if previous step failed
        with:
          name: .NET Tests
          path: "**/test-results.trx"
          reporter: dotnet-trx
          fail-on-error: true
          
      # Add a step to find and filter coverage files
      - name: Find and Filter Coverage Files
        id: filter_coverage_files
        run: |
          # Find all coverage.cobertura.xml files
          coverage_files=$(find coverage -type f -name 'coverage.cobertura.xml')
          
          # Filter out files that contain '/In/'
          filtered_files=$(echo "$coverage_files" | grep -v '/In/')
          
          # Save the filtered files to an environment file for later use
          echo "filtered_files=$filtered_files" >> $GITHUB_ENV
  
      # Use the filtered coverage files in the CodeCoverageSummary action
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ${{ env.filtered_files }}
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add coverage report to PR comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2.2.0
        with:
          recreate: true
          path: code-coverage-results.md
  
      - name: Add coverage summary to job summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
